version: '3.9'
services:
  postgres-film:
    image: postgres:15.3
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "filmorate_dev"
      PGDATA: /data/postgres
    volumes:
      - ./postgres-film:/data/postgres
    networks:
      backend:
        aliases:
          - "postgres-film"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-events:
    image: postgres:15.3
    ports:
      - "5438:5438"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "filmorate_events"
      PGDATA: /data/postgres
    volumes:
      - ./postgres-events:/data/postgres
    expose:
      - "5438"
    command:
      - -p 5438
    networks:
      backend:
        aliases:
          - "postgres-events"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-user:
    image: postgres:15.3
    ports:
      - "5431:5431"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "filmorate_user"
      PGDATA: /data/postgres
    volumes:
      - ./postgres-user:/data/postgres
    expose:
      - "5431"
    command:
      - -p 5431
    networks:
      backend:
        aliases:
          - "postgres-user"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-review:
    image: postgres:15.3
    ports:
      - "5436:5436"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "filmorate_review"
      PGDATA: /data/postgres
    volumes:
      - ./postgres-review:/data/postgres
    expose:
      - "5436"
    command:
      - -p 5436
    networks:
      backend:
        aliases:
          - "postgres-review"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-rating:
    image: postgres:15.3
    ports:
      - "5437:5437"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "filmorate_rating"
      PGDATA: /data/postgres
    volumes:
      - ./postgres-rating:/data/postgres
    expose:
      - "5437"
    command:
      - -p 5437
    networks:
      backend:
        aliases:
          - "postgres-rating"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  mongo:
#    container_name: mongo
#    image: mongo:4.4.14
#    restart: always
#    ports:
#      - "27017:27017"
#    expose:
#      - "27017"
#    volumes:
#      - ./mongo-data:/data/db
#    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
#    healthcheck:
#      test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongo:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
#      interval: 10s
#      start_period: 30s
#    networks:
#      backend:
#        aliases:
#          - "mongo"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      backend:
        aliases:
          - "zookeeper"

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      backend:
        aliases:
          - "broker"

#  kadeck-db:
#    container_name: "kadeck-db"
#    ports:
#      - "5435:5435"
#    image: postgres:12.6
#    restart: on-failure:3
#    environment:
#      POSTGRES_DB: "kadeckweb"
#      POSTGRES_USER: "postgres"
#      POSTGRES_PASSWORD: "postgres"
#    expose:
#      - "5435"
#    command:
#      - -p 5435
#    networks:
#      backend:
#        aliases:
#          - "kadeck-db"
#
#  kadeck:
#    container_name: "kadeck"
#    ports:
#      - "80:80"
#    image: xeotek/kadeck-allinone:latest
#    environment:
#      xeotek_kadeck_home: "kadeckweb"
#      xeotek_kadeck_db_username: "postgres"
#      xeotek_kadeck_db_password: "postgres"
#      xeotek_kadeck_db_url: "jdbc:postgresql://kadeck-db:5432/kadeckweb"
#    networks:
#      backend:
#        aliases:
#          - "kadeck"
#
#  cmak:
#    image: hlebalbau/kafka-manager:stable
#    container_name: "cmak"
#    restart: always
#    ports:
#      - "9000:9000"
#    environment:
#      ZK_HOSTS: "zookeeper:2181"
#    depends_on:
#      - zookeeper
#      - broker
#    networks:
#      backend:
#        aliases:
#          - "cmak"

networks:
  backend:
    driver: bridge