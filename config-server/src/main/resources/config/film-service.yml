server:
  port: 8082

eureka:
  instance:
    preferIpAddress: true
    hostname: localhost
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:8085/eureka/
  server:
    waitTimeInMsWhenSyncEmpty: 5

spring:
  kafka:
    client-id: ${spring.application.name}
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      bootstrap-servers: localhost:9092
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: ru.aasmc.filmservice.dto.FilmRateDto
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
  datasource:
    url: jdbc:postgresql://localhost:5432/filmorate_dev
    username: postgres
    password: '{cipher}7ae9c6ddf90efd4b907056ea390955641bd58ab29491025f4b596d83fcfaf01c'
    driver-class-name: org.postgresql.Driver

kafkaprops:
  filmLikeTopic: "filmLikes"
  deleteAllLikesTopic: "deleteAllLikes"
  newRatingTopic: "newRatings"

urls:
  userService: localhost:8088

springdoc:
  api-docs:
    path: /films/api-docs
  swagger-ui:
    path: /films/swagger-ui.html
    enabled: true

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
  pattern: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
    instances:
      userClient:
        base-config: default
        register-health-indicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 4
        waitDurationInOpenState: 20s
        failureRateThreshold: 60
        recordExceptions:
          - feign.FeignException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions:
          - ru.aasmc.filmservice.exceptions.ResourceNotFoundException
      directorService:
        base-config: default
        register-health-indicator: true
      ratingClient:
        base-config: default
        register-health-indicator: true
        slidingWindowSize: 6
        permittedNumberOfCallsInHalfOpenState: 4
        waitDurationInOpenState: 20s
        failureRateThreshold: 60
        recordExceptions:
          - feign.FeignException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
  thread-pool-bulkhead:
    configs:
      default:
        max-thread-pool-size: 4
        core-thread-pool-size: 2
        queue-capacity: 10
        keep-alive-duration: 20ms
    instances:
      userClientBulkhead:
        base-config: default
      ratingClientBulkhead:
        base-config: default


management:
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  metrics:
    enable:
      resilience4j.circuitbreaker.calls: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    metrics:
      enabled: true
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState